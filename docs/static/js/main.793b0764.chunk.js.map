{"version":3,"sources":["components/BasicMap/styles.module.css","config/config.js","components/BasicMap/index.js","app/App.js","reportWebVitals.js","index.js"],"names":["module","exports","maptiler","url","attribution","center","lat","lng","zoomLevel","BasicMap","useState","mapLayers","setMapLayers","mapRef","useRef","useEffect","console","log","Map","config","zoom","ref","className","styles","map","FeatureGroup","position","onCreated","e","layerType","layer","_leaflet_id","layers","id","latlngs","getLatLngs","onEdited","_layers","Object","values","forEach","editing","l","onDeleted","filter","draw","rectangle","polyline","circle","circlemarker","marker","TileLayer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,IAAM,sB,kOCDT,GACbC,SAAU,CACRC,IAAK,yFACLC,YAAa,IAEfC,OAAQ,CAAEC,IAAK,UAAWC,IAAK,WAC/BC,UAAW,ICsEEC,EApEE,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACdC,EADc,KACHC,EADG,KAEfC,EAASC,mBAuCf,OAJAC,qBAAU,WACRC,QAAQC,IAAIN,KACX,CAACA,IAGF,mCACE,eAACO,EAAA,EAAD,CAAKb,OAAQc,EAAOd,OAAQe,KAAMD,EAAOX,UAAWa,IAAKR,EAAQS,UAAWC,IAAOC,IAAnF,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CACEC,SAAS,WACTC,UA3CO,SAACC,GAAM,IAEdC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,MACnB,GAAkB,YAAdD,EAAyB,CAAC,IACpBE,EAAgBD,EAAhBC,YAERnB,GAAa,SAACoB,GAAD,4BACRA,GADQ,CAEX,CAAEC,GAAIF,EAAaG,QAASJ,EAAMK,aAAa,WAoC3CC,SA/BO,SAACR,GAAM,IAEJS,EAAcT,EAAxBI,OAAUK,QAElBC,OAAOC,OAAOF,GAASG,SAAQ,YAA+B,IAA5BT,EAA2B,EAA3BA,YAAaU,EAAc,EAAdA,QAC7C7B,GAAa,SAACoB,GAAD,OAAYA,EAAOR,KAAI,SAACkB,GAAD,OAAQA,EAAET,KAAOF,EAAT,2BACnCW,GADmC,IAChCR,QAAQ,eAAMO,EAAQP,QAAQ,MACtCQ,YAyBEC,UArBQ,SAACf,GAAM,IAELS,EAAcT,EAAxBI,OAAUK,QAElBC,OAAOC,OAAOF,GAASG,SAAQ,YAAsB,IAAnBT,EAAkB,EAAlBA,YAChCnB,GAAa,SAACoB,GAAD,OAAYA,EAAOY,QAAO,SAACF,GAAD,OAAOA,EAAET,KAAOF,YAiBjDc,KAAM,CACJC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,cAAc,EACdC,QAAQ,OAId,cAACC,EAAA,EAAD,CACEhD,IAAKgB,EAAOjB,SAASC,IACrBC,YAAae,EAAOjB,SAASE,oBC3DxBgD,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.793b0764.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"styles_map__3o9Ln\"};","export default {\r\n  maptiler: {\r\n    url: 'http://tile.digimap.ru/rumap/{z}/{x}/{y}.png?guid=93BC6341-B35E-4B34-9DFE-26796F64BBB7',\r\n    attribution: '',\r\n  },\r\n  center: { lat: 57.152985, lng: 65.541227 },\r\n  zoomLevel: 12,\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Map, TileLayer, FeatureGroup } from 'react-leaflet';\r\nimport { EditControl } from 'react-leaflet-draw';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport styles from './styles.module.css';\r\nimport config from '../../config/config';\r\n\r\nconst BasicMap = () => {\r\n  const [mapLayers, setMapLayers] = useState([]);\r\n  const mapRef = useRef();\r\n\r\n  const onCreate = (e) => {\r\n    // console.log(e);\r\n    const { layerType, layer } = e;\r\n    if (layerType === 'polygon') {\r\n      const { _leaflet_id } = layer;\r\n\r\n      setMapLayers((layers) => [\r\n        ...layers,\r\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const onEdited = (e) => {\r\n    // console.log(e);\r\n    const { layers: { _layers } } = e;\r\n\r\n    Object.values(_layers).forEach(({ _leaflet_id, editing }) => {\r\n      setMapLayers((layers) => layers.map((l) => (l.id === _leaflet_id\r\n        ? { ...l, latlngs: { ...editing.latlngs[0] } }\r\n        : l)));\r\n    });\r\n  };\r\n\r\n  const onDeleted = (e) => {\r\n    // console.log(e);\r\n    const { layers: { _layers } } = e;\r\n\r\n    Object.values(_layers).forEach(({ _leaflet_id }) => {\r\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(mapLayers);\r\n  }, [mapLayers]);\r\n\r\n  return (\r\n    <>\r\n      <Map center={config.center} zoom={config.zoomLevel} ref={mapRef} className={styles.map}>\r\n        <FeatureGroup>\r\n          <EditControl\r\n            position=\"topright\"\r\n            onCreated={onCreate}\r\n            onEdited={onEdited}\r\n            onDeleted={onDeleted}\r\n            draw={{\r\n              rectangle: false,\r\n              polyline: false,\r\n              circle: false,\r\n              circlemarker: false,\r\n              marker: false,\r\n            }}\r\n          />\r\n        </FeatureGroup>\r\n        <TileLayer\r\n          url={config.maptiler.url}\r\n          attribution={config.maptiler.attribution}\r\n        />\r\n      </Map>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasicMap;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BasicMap from '../components/BasicMap';\r\n\r\nfunction App() {\r\n  return (\r\n    <BasicMap />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}